{"version":3,"file":"main.js","mappings":"uIAAA,SAEA,SAEA,SAGA,IAAaA,EAAb,MACEC,YAA6BC,GAAA,KAAAA,WAAAA,EAG7BC,UACE,OAAOC,KAAKF,WAAWC,UAInBE,SAAiBC,G,sDACrB,MAAMC,EAAaC,KAAKC,UAAUH,GAC5BI,EAAiB,cAAcH,KAKrC,OAHAI,QAAQC,MAAM,aAAcL,GAC5BI,QAAQC,MAAM,iBAAkBF,GAEzB,CAAEH,WAAAA,EAAYG,eAAAA,SAZvB,kBADC,IAAAG,KAAI,U,sHACa,mB,OAAA,IAAP,EAAAC,SAAA,EAAAA,SAAO,W,6BAKlB,kBADC,IAAAD,KAAI,aACW,oBAAAE,U,mKATLf,GAAa,kBADzB,IAAAgB,e,qCAEoD,mB,OAAA,IAAV,EAAAC,YAAA,EAAAA,YAAU,YADxCjB,GAAA,EAAAA,cAAAA,G,iGCPb,SAEA,SACA,SAOA,IAAakB,EAAb,QAAaA,GAAS,kBALrB,IAAAC,QAAO,CACNC,QAAS,GACTC,YAAa,CAAC,EAAArB,eACdsB,UAAW,CAAC,EAAAL,eAEDC,GAAA,EAAAA,UAAAA,G,kGCVb,SAIA,IAAaD,EAAb,MACEd,UACE,MAAO,CAAEoB,QAAS,qBAFTN,GAAU,kBADtB,IAAAO,eACYP,GAAA,EAAAA,WAAAA,G,gECJb,E,OAAA,yB,sECAAQ,EAAOC,QAAUC,QAAQ,mB,QCAzBF,EAAOC,QAAUC,QAAQ,iB,QCAzBF,EAAOC,QAAUC,QAAQ,WCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,uFChBf,SACA,SAEA,UAEA,Y,+CACE,MAAMQ,QAAY,EAAAC,YAAYC,OAAO,EAAAlB,WAErCgB,EAAIG,gBADiB,OAErB,MAAMC,EAAOC,QAAQC,IAAIC,MAAQ,WAC3BP,EAAIQ,OAAOJ,GACjB,EAAAK,OAAOC,IACL,kDAAkDN,YAItDO,I","sources":["webpack://learning-apps/./apps/api/src/app/app.controller.ts","webpack://learning-apps/./apps/api/src/app/app.module.ts","webpack://learning-apps/./apps/api/src/app/app.service.ts","webpack://learning-apps/./libs/api-interfaces/src/index.ts","webpack://learning-apps/external commonjs \"@nestjs/common\"","webpack://learning-apps/external commonjs \"@nestjs/core\"","webpack://learning-apps/external commonjs \"tslib\"","webpack://learning-apps/webpack/bootstrap","webpack://learning-apps/./apps/api/src/main.ts"],"sourcesContent":["import { Controller, Get, Body } from '@nestjs/common';\n\nimport { Message } from '@learning-apps/api-interfaces';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('hello')\n  getData(): Message {\n    return this.appService.getData();\n  }\n\n  @Get('shipment')\n  async shipment(@Body() param: any) {\n    const bodyString = JSON.stringify(param);\n    const rawRequestText = `@Body()>>> ${bodyString} `;\n\n    console.debug('bodyString', bodyString);\n    console.debug('rawRequestText', rawRequestText);\n\n    return { bodyString, rawRequestText };\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Message } from '@learning-apps/api-interfaces';\n\n@Injectable()\nexport class AppService {\n  getData(): Message {\n    return { message: 'Welcome to api!' };\n  }\n}\n","export * from './lib/api-interfaces';\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `ðŸš€ Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":["AppController","constructor","appService","getData","this","shipment","param","bodyString","JSON","stringify","rawRequestText","console","debug","Get","Message","Body","Controller","AppService","AppModule","Module","imports","controllers","providers","message","Injectable","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","create","setGlobalPrefix","port","process","env","PORT","listen","Logger","log","bootstrap"],"sourceRoot":""}